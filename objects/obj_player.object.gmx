<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise Variables
grav = 0.5;
hsp = 0;
vsp = 0;
movespeed = 4;
jumpspeed_normal = 8;
jumpspeed_powerup = 30;
hanging = false;
timer = 1;
maxheight = 0;
bounceID = 0;
bounce = false;
image_speed = 0.25;
baa = false;
baanumber = 0;
baatime = true;
jumpspeed = jumpspeed_normal;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>baatime = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hanging = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jumpspeed = jumpspeed_normal;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room!= main_menu &amp;&amp; room != the_end){
    size = 400;
    draw_set_blend_mode(bm_subtract);
    surface_set_target(global.light);
    draw_ellipse_colour(x-size/2-view_xview,y-size/2-view_yview,x+size/2-view_xview,y+size/2-view_yview,c_white,c_black,false);
    surface_reset_target();
    draw_set_blend_mode(bm_normal);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.go = false) exit;


//GM COMMANDS - COMMENT THIS SECTION OUT FOR CLIENT VERSION
//*******************************************************************
//*******************************************************************

    //Goto previous room
    if(room_exists(room_previous(room)) &amp;&amp; keyboard_check_pressed(vk_f1)){
            repeat(250) instance_create(-100,-100,obj_blood);
                with(surface_blood_controller)
                    instance_destroy();
            room_goto_previous();
            global.levelCount-=1;
    }
    //Goto next room
    if(room_exists(room_next(room)) &amp;&amp; keyboard_check_pressed(vk_f2)){
            repeat(250) instance_create(-100,-100,obj_blood);
                with(surface_blood_controller)
                    instance_destroy();
            room_goto_next();
            global.levelCount+=1;
    }
    //Restart level
    if(keyboard_check_pressed(vk_f3)){
        repeat(250) instance_create(-100,-100,obj_blood);
            with(surface_blood_controller)
                instance_destroy();
            room_restart();
    }
   
            
//*******************************************************************           
//*******************************************************************



//Get Player Input
key_right = keyboard_check(vk_right) || keyboard_check(ord("D"));
key_left = keyboard_check(vk_left) || keyboard_check(ord("A"));
key_jump_held = keyboard_check(vk_space) || keyboard_check(vk_shift) || keyboard_check(vk_up) || keyboard_check(ord("W"));
key_jump = keyboard_check_pressed(vk_space) || keyboard_check_pressed(vk_shift) || keyboard_check_pressed(vk_up) || keyboard_check_pressed(ord("W"));

if(key_left)
    left = true;
if(key_right)
    left = false;

//React to inputs
move = key_right - key_left;
hsp = move * movespeed;
if(place_meeting(x,y+1,obj_wall) || place_meeting(x,y+1,obj_dead_platform) || place_meeting(x,y+1,obj_crusher) || place_meeting(x,y+1,obj_step)){
    if(key_jump){
        vsp = -jumpspeed;
        bounce = false;
        baa = true;
        baanumber = choose(1,2);
    }
}
if(vsp&lt;20)
    vsp += grav;

//Bounce
    if(place_meeting(x,y+vsp,obj_dead_platform) &amp;&amp; vsp &gt; 2){
        if(instance_nearest(x,y,obj_dead_platform).id !=  bounceID)
            bounce = false;
        if(vsp&lt;11 &amp;&amp; bounce = false){
            vsp = -11;
            bounce = true;
        }
        else
            vsp = -vsp
        vsp+=2;
        audio_play_sound(snd_bounce, 0, false);  
        bounceID = instance_nearest(x,y,obj_dead_platform).id;      
}

if(place_meeting(x,y+1,obj_wall) ||  place_meeting(x,y+1,obj_crusher) || place_meeting(x,y+1,obj_step)){
    if(place_meeting(x,y+vsp,obj_dead_platform)){
}
    else{
        vsp = key_jump * -jumpspeed;

    }
}

    



//if(vsp&lt;0) &amp;&amp;  (!key_jump_held)
   //vsp = max(vsp,-jumpspeed/4);
 

//Respawn if fall off of map
if(y&gt;room_height){
    x=xstart;
    y=ystart;
    global.death_count += 1;
}
 
//Horizontal Collision
if(place_meeting(x+hsp,y,obj_wall)  || place_meeting(x+hsp,y,obj_dead_platform) || place_meeting(x+hsp,y,obj_crusher) || place_meeting(x+hsp,y,obj_step)|| place_meeting(x+hsp,y,obj_spikes)){
    
    yplus = 0;
    while((place_meeting(x+hsp,y-yplus,obj_wall) || place_meeting(x+hsp,y-yplus,obj_dead_platform) || place_meeting(x+hsp,y-yplus,obj_crusher) || place_meeting(x+hsp,y-yplus,obj_step)) &amp;&amp; yplus &lt;= abs(4*hsp))
        yplus +=1;
    if(place_meeting(x+hsp,y-yplus,obj_wall) || place_meeting(x+hsp,y-yplus,obj_dead_platform) || place_meeting(x+hsp,y-yplus,obj_crusher) || place_meeting(x+hsp,y-yplus,obj_step) || place_meeting(x+hsp,y-yplus,obj_spikes)){
        while(!place_meeting(x+sign(hsp),y,obj_wall)  &amp;&amp; !place_meeting(x+sign(hsp),y,obj_dead_platform) &amp;&amp; !place_meeting(x+sign(hsp),y,obj_crusher) &amp;&amp; !place_meeting(x+sign(hsp),y,obj_step) &amp;&amp; !place_meeting(x+sign(hsp),y,obj_spikes))
            x+=sign(hsp);
        hsp = 0;
    }
    else{
        y -= yplus;
    }

}
x += hsp;

//Vertical Collision
if(place_meeting(x,y+vsp,obj_wall) || place_meeting(x,y+vsp,obj_dead_platform) || place_meeting(x,y+vsp,obj_crusher) || place_meeting(x,y+vsp,obj_step)){
    while(!place_meeting(x,y+sign(vsp),obj_wall)  &amp;&amp; !place_meeting(x,y+sign(vsp),obj_dead_platform) &amp;&amp; !place_meeting(x,y+sign(vsp),obj_crusher) &amp;&amp; !place_meeting(x,y+sign(vsp),obj_step)){
        y+=sign(vsp);
    }
    vsp = 0;
}


 
//Collision with Crusher
if(!place_meeting(x,y+1,obj_wall) &amp;&amp; place_meeting(x,y,obj_crusher) &amp;&amp; !key_jump){
    vsp = instance_nearest(x,y,obj_crusher).vspeed
}

y += vsp;

if(instance_exists(obj_crusher)){
    if((obj_crusher.vspeed &lt; 0 &amp;&amp; place_meeting(x,y-1,obj_wall) &amp;&amp; place_meeting(x,y+1,instance_nearest(x,y,obj_crusher))) || (place_meeting(x,y-1,obj_crusher) &amp;&amp; place_meeting(x,y+1,obj_crusher)) || (obj_crusher.vspeed &gt; 0 &amp;&amp; place_meeting(x,y+1,obj_wall) &amp;&amp; place_meeting(x,y-1,instance_nearest(x,y,obj_crusher)))){
            repeat(100) instance_create(x,y,obj_blood);
            audio_play_sound(snd_spikes, 0, false);
            x = xstart;
            y = ystart;
            vsp = 0;
            global.death_count += 1;
        }
    }
    
    
//Crushed by falling sheep

 if(instance_exists(obj_dead_platform)){
    if((obj_dead_platform.vspeed &lt; 0 &amp;&amp; place_meeting(x,y-1,obj_wall) &amp;&amp; place_meeting(x,y+1,instance_nearest(x,y,obj_dead_platform))) || (place_meeting(x,y-1,obj_dead_platform) &amp;&amp; place_meeting(x,y+1,obj_dead_platform)) || (obj_dead_platform.vspeed &gt; 0 &amp;&amp; place_meeting(x,y+1,obj_wall) &amp;&amp; place_meeting(x,y-1,instance_nearest(x,y,obj_dead_platform)))){
            repeat(100) instance_create(x,y,obj_blood);
            audio_play_sound(snd_spikes, 0, false);
            x = xstart;
            y = ystart;
            vsp = 0;
            global.death_count += 1;
        }
    }
       
//Collision with belts
if(place_meeting(x,y+1,obj_belt) &amp;&amp; !place_meeting(x+3,y,obj_wall) &amp;&amp; !place_meeting(x+3,y,obj_dead_platform) &amp;&amp; !place_meeting(x+3,y,obj_crusher)){
    x+=2;
}

if(place_meeting(x,y+1,obj_belt_left) &amp;&amp; !place_meeting(x+3,y,obj_wall) &amp;&amp; !place_meeting(x+3,y,obj_dead_platform) &amp;&amp; !place_meeting(x+3,y,obj_crusher)){
    x-=2;
}
    
//Collision with Spikes
if(place_meeting(x,y+1,obj_spikes)){
        instance_create(x,y,obj_dead_platform);
        repeat(100) instance_create(x,y,obj_blood);
        audio_play_sound(snd_spikes, 0, false);
        x = xstart;
        y = ystart;
        vsp = 0;
        global.death_count += 1;
}

//Collision with Left Hook
if(place_meeting(x,y,obj_hook_left)){
        with(instance_nearest(x,y,obj_hook_left)){
            instance_destroy();
            instance_create(x-15,y,obj_dead_hang_left);
        }
        repeat(100) instance_create(x,y,obj_blood);
        audio_play_sound(snd_spikes, 0, false);
        x = xstart;
        y = ystart;
        vsp = 0;
        global.death_count += 1;
}

//Collision with Right Hook
if(place_meeting(x,y,obj_hook_right)){
        with(instance_nearest(x,y,obj_hook_right)){
            instance_destroy();
            instance_create(x-15,y,obj_dead_hang_right);
        }
        repeat(100) instance_create(x,y,obj_blood);
        audio_play_sound(snd_spikes, 0, false);
        x = xstart;
        y = ystart;
        vsp = 0;
        global.death_count += 1;
}

//Collision with Left Dead Hanging Sheep
if(!place_meeting(x,y,obj_wall) &amp;&amp; place_meeting(x,y,obj_dead_hang_left) &amp;&amp; hanging = false &amp;&amp; vsp!=0){
        
        vsp = 0
      
        if(left = true){
            x = instance_nearest(x,y,obj_dead_hang_left).x-5;
            y = instance_nearest(x,y,obj_dead_hang_left).y+45;
            image_xscale = -1;
        }
        if(left = false){
            x = instance_nearest(x,y,obj_dead_hang_left).x+15;
            y = instance_nearest(x,y,obj_dead_hang_left).y+45;
            image_xscale = 1;
        }
        if(key_jump){
            hanging = true;
            alarm[1] = 30;  
            vsp=key_jump * -jumpspeed;
        }
            if(keyboard_check(vk_down) || keyboard_check(ord("S"))){
            hanging = true;
            alarm[1]= 30
        }
        
}

//Collision with Right Dead Hanging Sheep
if(!place_meeting(x,y,obj_wall) &amp;&amp; place_meeting(x,y,obj_dead_hang_right) &amp;&amp; hanging = false &amp;&amp; vsp!=0){
            
        vsp = 0

        if(left = true){
            x = instance_nearest(x,y,obj_dead_hang_right).x-5;
            y = instance_nearest(x,y,obj_dead_hang_right).y+45;
            image_xscale = -1;
        }
        if(left = false){
            x = instance_nearest(x,y,obj_dead_hang_right).x+15;
            y = instance_nearest(x,y,obj_dead_hang_right).y+45;
            image_xscale = 1;
        }
        if(key_jump){
            hanging = true;
            alarm[1] = 30;  
            vsp=key_jump * -jumpspeed;
        }
        if(keyboard_check(vk_down)|| keyboard_check(ord("S"))){
            hanging = true;
            alarm[1]= 30
        }

}

if(place_meeting(x,y,obj_wall)){
    if(place_meeting(x,y,obj_dead_hang_right))
        x-=20;
    if(place_meeting(x,y,obj_dead_hang_left))
        x+=20;
    hanging = true;
    alarm[1] =30;
}


//Animate
if (move!=0 &amp;&amp; !place_meeting(x,y,obj_dead_hang_right) &amp;&amp; !place_meeting(x,y,obj_dead_hang_left))
    image_xscale = -move;
    
    if(hanging=false &amp;&amp; !place_meeting(x,y,obj_wall) &amp;&amp; (place_meeting(x,y,obj_dead_hang_right) || place_meeting(x,y,obj_dead_hang_left))){
        sprite_index = spr_player_hang;
    }else{    
    
    
    if (place_meeting(x,y+1,obj_wall) || place_meeting(x,y+1,obj_dead_platform)|| place_meeting(x,y+1,obj_crusher)){
        if(hsp!=0)
            sprite_index = spr_player_move;
        else
            sprite_index = spr_player_idle;
    }
    else{
        if( vsp &lt; 0)
            sprite_index = spr_player_jump;
        else
            sprite_index = spr_player_fall;
    
}
}

//Baa

if baa == true &amp;&amp; baanumber = 1 &amp;&amp; baatime = true
    {
        audio_play_sound(snd_baa5, 0, false)
        baatime = false;
        baanumber = 0;
        baa = false;
        alarm[2] = 60;
    }
        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_spikes">
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_spikes</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>22,14</point>
    <point>42,14</point>
    <point>42,54</point>
    <point>22,54</point>
  </PhysicsShapePoints>
</object>
